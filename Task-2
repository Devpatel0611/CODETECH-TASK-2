# Movie Review System using sentiment Analysis 

from google.colab import drive
drive.mount('/content/drive')

import numpy as np 
import pandas as pd

df=pd.read_csv('/content/drive/MyDrive/Movie review system/IMDB Dataset.csv')

df.head()

df['review'][1]

#Text Cleaning
df=df.sample(10000)

df.shape

df.info()

df['sentiment'].replace({'positive':1,'negative':0},inplace=True)

df.head()

import re
clean = re.compile('<.*?>')
re.sub(clean, '', df.iloc[2].review)

def clean_html(text):
  clean = re.compile('<.*?>')
  return re.sub(clean, '', text)

df['review']=df['review'].apply(clean_html)

def covert_lower(text):
  return text.lower()

df['review']=df['review'].apply(covert_lower)

def remove_special(text):
  x=''
  for i in text:
    if i.isalnum():
      x=x+i
    else:
      x=x+' '
  return x 

df['review']=df['review'].apply(remove_special)

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords

def remove_stopwords(text):
  x=[]
  for i in text.split():
    if i not in stopwords.words('english'):
      x.append(i)
  y=x[:]
  x.clear()
  return y    

df['review']=df['review'].apply(remove_stopwords)

df

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

y=[]
def stem_words(text):
  for i in text:
    y.append(ps.stem(i))
  z=y[:]
  y.clear()
  return z

df['review']=df['review'].apply(stem_words)

def join_back(list_input):
  return " ".join(list_input)

df['review']=df['review'].apply(join_back)

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=1000)

x=cv.fit_transform(df['review']).toarray()

x.shape

y=df.iloc[:,-1].values

y

y.shape

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

from sklearn.naive_bayes import GaussianNB,MultinomialNB,BernoulliNB

clf1=GaussianNB()
clf2=MultinomialNB()
clf3=BernoulliNB()

clf1.fit(x_train,y_train)
clf2.fit(x_train,y_train)
clf3.fit(x_train,y_train)

y_pred1=clf1.predict(x_test)
y_pred2=clf2.predict(x_test)
y_pred3=clf3.predict(x_test)

from sklearn.metrics import accuracy_score
print('Gaussian',accuracy_score(y_test,y_pred1))
print('Multinomial',accuracy_score(y_test,y_pred2))
print('Bernoulli',accuracy_score(y_test,y_pred3))

pd.DataFrame(np.c_[y_test,y_pred3],columns=['Actual','Predicted'])

import pickle

pickle.dump(clf3,open('/content/drive/MyDrive/Movie review system/model.pkl','wb'))
pickle.dump(cv,open('/content/drive/MyDrive/Movie review system/count-vectorizer.pkl','wb'))

save_cv=pickle.load(open('/content/drive/MyDrive/Movie review system/count-vectorizer.pkl','rb'))
model=pickle.load(open('/content/drive/MyDrive/Movie review system/model.pkl','rb'))

def test_model(sentence):
  sen=save_cv.transform([sentence]).toarray()
  res=model.predict(sen)[0]
  if res==1:
    return 'Positive review'
  else:
    return 'Negative review'

sen='This is the wonderful movie'
res=test_model(sen)
print(res)

sen='This is the worst movie'
res=test_model(sen)
print(res)

